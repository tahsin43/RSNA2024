{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "c9a2bddf",
   "metadata": {
    "papermill": {
     "duration": 0.012274,
     "end_time": "2024-09-22T22:02:23.768544",
     "exception": false,
     "start_time": "2024-09-22T22:02:23.756270",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# RSNA2024 LSDC Training Baseline\n",
    "In the [previous notebook](https://www.kaggle.com/code/itsuki9180/rsna2024-lsdc-making-dataset), We selected the images we wanted to use and exported them to png.\n",
    "\n",
    "This notebook will use those images for training.\n",
    "\n",
    "- version 1 to 5 are old versions\n",
    "- version 6 is fixed something about validation metrics\n",
    "- version 7 is used efn-b3\n",
    "\n",
    "### My other Notebooks\n",
    "- [RSNA2024 LSDC Making Dataset](https://www.kaggle.com/code/itsuki9180/rsna2024-lsdc-making-dataset) \n",
    "- [RSNA2024 LSDC Training Baseline](https://www.kaggle.com/code/itsuki9180/rsna2024-lsdc-training-baseline) <- you're reading now\n",
    "- [RSNA2024 LSDC Submission Baseline](https://www.kaggle.com/code/itsuki9180/rsna2024-lsdc-submission-baseline)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "58e21f78",
   "metadata": {
    "papermill": {
     "duration": 0.011081,
     "end_time": "2024-09-22T22:02:23.791312",
     "exception": false,
     "start_time": "2024-09-22T22:02:23.780231",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Import libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "57251712",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-22T22:02:23.816730Z",
     "iopub.status.busy": "2024-09-22T22:02:23.815843Z",
     "iopub.status.idle": "2024-09-22T22:02:23.827024Z",
     "shell.execute_reply": "2024-09-22T22:02:23.826085Z"
    },
    "papermill": {
     "duration": 0.026532,
     "end_time": "2024-09-22T22:02:23.829386",
     "exception": false,
     "start_time": "2024-09-22T22:02:23.802854",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import shutil"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "5eb29d9c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-22T22:02:23.853418Z",
     "iopub.status.busy": "2024-09-22T22:02:23.852778Z",
     "iopub.status.idle": "2024-09-22T22:02:23.857790Z",
     "shell.execute_reply": "2024-09-22T22:02:23.856441Z"
    },
    "papermill": {
     "duration": 0.019427,
     "end_time": "2024-09-22T22:02:23.860176",
     "exception": false,
     "start_time": "2024-09-22T22:02:23.840749",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# data_dir='/Users/tahsplique/Desktop/RSNA2024/_output_/cvt_png'\n",
    "\n",
    "data_dir='/kaggle/input/rsna2024-v1/cvt_png'\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "209473bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-22T22:02:23.883648Z",
     "iopub.status.busy": "2024-09-22T22:02:23.883267Z",
     "iopub.status.idle": "2024-09-22T22:02:23.888097Z",
     "shell.execute_reply": "2024-09-22T22:02:23.887088Z"
    },
    "papermill": {
     "duration": 0.01888,
     "end_time": "2024-09-22T22:02:23.890181",
     "exception": false,
     "start_time": "2024-09-22T22:02:23.871301",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# required_dirs = ['Axial T2', 'Sagittal T1', 'Sagittal T2_STIR']\n",
    "# # Required subdirectories\n",
    "\n",
    "# # Iterate through each study ID directory\n",
    "# for study_id in os.listdir(data_dir):\n",
    "#     study_path = os.path.join(data_dir, study_id)\n",
    "    \n",
    "#     # Check if it is a directory\n",
    "#     if os.path.isdir(study_path):\n",
    "#         # Check for the presence of required directories\n",
    "#         missing_dirs = [d for d in required_dirs if not os.path.isdir(os.path.join(study_path, d))]\n",
    "        \n",
    "#         # If there are missing directories, remove the study ID directory\n",
    "#         if missing_dirs:\n",
    "#             print(f\"Removing {study_path} due to missing directories: {missing_dirs}\")\n",
    "# #             shutil.rmtree(study_path)\n",
    "\n",
    "# print(\"Cleanup complete.\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "d56c5650",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-22T22:02:23.912883Z",
     "iopub.status.busy": "2024-09-22T22:02:23.912236Z",
     "iopub.status.idle": "2024-09-22T22:02:23.916190Z",
     "shell.execute_reply": "2024-09-22T22:02:23.915320Z"
    },
    "papermill": {
     "duration": 0.017508,
     "end_time": "2024-09-22T22:02:23.918198",
     "exception": false,
     "start_time": "2024-09-22T22:02:23.900690",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 3008676218,2780132468,2492114990"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "1aa6517d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-22T22:02:23.941953Z",
     "iopub.status.busy": "2024-09-22T22:02:23.941609Z",
     "iopub.status.idle": "2024-09-22T22:02:33.867415Z",
     "shell.execute_reply": "2024-09-22T22:02:33.866430Z"
    },
    "papermill": {
     "duration": 9.940197,
     "end_time": "2024-09-22T22:02:33.869810",
     "exception": false,
     "start_time": "2024-09-22T22:02:23.929613",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/albumentations/__init__.py:13: UserWarning: A new version of Albumentations is available: 1.4.16 (you have 1.4.14). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\n",
      "  check_for_updates()\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "import gc\n",
    "import sys\n",
    "from PIL import Image\n",
    "import cv2\n",
    "import math, random\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "from glob import glob\n",
    "from tqdm import tqdm\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.model_selection import KFold\n",
    "\n",
    "from collections import OrderedDict\n",
    "\n",
    "import torch\n",
    "import torch.nn.functional as F\n",
    "from torch import nn\n",
    "from torch.utils.data import DataLoader, Dataset\n",
    "from torch.optim import AdamW\n",
    "\n",
    "import timm\n",
    "from transformers import get_cosine_schedule_with_warmup\n",
    "\n",
    "import albumentations as A\n",
    "\n",
    "from sklearn.model_selection import KFold\n",
    "import random"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dcc157c9",
   "metadata": {
    "papermill": {
     "duration": 0.010458,
     "end_time": "2024-09-22T22:02:33.891282",
     "exception": false,
     "start_time": "2024-09-22T22:02:33.880824",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Config"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "0465e0bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-22T22:02:33.916285Z",
     "iopub.status.busy": "2024-09-22T22:02:33.915534Z",
     "iopub.status.idle": "2024-09-22T22:02:34.004289Z",
     "shell.execute_reply": "2024-09-22T22:02:34.003148Z"
    },
    "papermill": {
     "duration": 0.102933,
     "end_time": "2024-09-22T22:02:34.006570",
     "exception": false,
     "start_time": "2024-09-22T22:02:33.903637",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "NOT_DEBUG = True # True -> run naormally, False -> debug mode, with lesser computing cost\n",
    "\n",
    "OUTPUT_DIR = f'rsna24-results'\n",
    "device = 'cuda:0' if torch.cuda.is_available() else 'cpu'\n",
    "N_WORKERS = os.cpu_count() \n",
    "USE_AMP = True # can change True if using T4 or newer than Ampere\n",
    "SEED = 8620\n",
    "\n",
    "IMG_SIZE = [512, 512]\n",
    "IN_CHANS = 30\n",
    "N_LABELS = 25\n",
    "N_CLASSES = 3 * N_LABELS\n",
    "\n",
    "AUG_PROB = 0.75\n",
    "\n",
    "N_FOLDS = 5 if NOT_DEBUG else 2\n",
    "EPOCHS = 20 if NOT_DEBUG else 2\n",
    "MODEL_NAME = \"tf_efficientnet_b3.ns_jft_in1k\" if NOT_DEBUG else \"tf_efficientnet_b0.ns_jft_in1k\"\n",
    "\n",
    "GRAD_ACC = 2\n",
    "TGT_BATCH_SIZE = 32\n",
    "BATCH_SIZE = TGT_BATCH_SIZE // GRAD_ACC\n",
    "MAX_GRAD_NORM = None\n",
    "EARLY_STOPPING_EPOCH = 3\n",
    "\n",
    "LR = 2e-4 * TGT_BATCH_SIZE / 32\n",
    "WD = 1e-2\n",
    "AUG = True"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "7c1fffcb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-22T22:02:34.031084Z",
     "iopub.status.busy": "2024-09-22T22:02:34.030706Z",
     "iopub.status.idle": "2024-09-22T22:02:34.035365Z",
     "shell.execute_reply": "2024-09-22T22:02:34.034521Z"
    },
    "papermill": {
     "duration": 0.018841,
     "end_time": "2024-09-22T22:02:34.037428",
     "exception": false,
     "start_time": "2024-09-22T22:02:34.018587",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "os.makedirs(OUTPUT_DIR, exist_ok=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "bb497777",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-22T22:02:34.061497Z",
     "iopub.status.busy": "2024-09-22T22:02:34.061141Z",
     "iopub.status.idle": "2024-09-22T22:02:34.075852Z",
     "shell.execute_reply": "2024-09-22T22:02:34.075140Z"
    },
    "papermill": {
     "duration": 0.028982,
     "end_time": "2024-09-22T22:02:34.077821",
     "exception": false,
     "start_time": "2024-09-22T22:02:34.048839",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import random\n",
    "import numpy as np\n",
    "import os\n",
    "import torch\n",
    "\n",
    "def set_random_seed(seed: int = 8620, deterministic: bool = False):\n",
    "    \"\"\"Set seeds for reproducibility\"\"\"\n",
    "    random.seed(seed)\n",
    "    np.random.seed(seed)\n",
    "    os.environ[\"PYTHONHASHSEED\"] = str(seed)\n",
    "    torch.manual_seed(seed)\n",
    "    \n",
    "    if torch.backends.mps.is_available():\n",
    "        # For Metal (MPS) backend\n",
    "        torch.mps.manual_seed(seed)\n",
    "    elif torch.cuda.is_available():\n",
    "        # For CUDA backend\n",
    "        torch.cuda.manual_seed(seed)\n",
    "        torch.cuda.manual_seed_all(seed)\n",
    "        torch.backends.cudnn.benchmark = True\n",
    "        torch.backends.cudnn.deterministic = deterministic\n",
    "    \n",
    "    # Note: Metal doesn't have direct equivalents for cudnn benchmark and deterministic settings\n",
    "\n",
    "# Usage\n",
    "SEED = 8620  # You can change this to any integer value\n",
    "set_random_seed(SEED)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e38bfe32",
   "metadata": {
    "papermill": {
     "duration": 0.010636,
     "end_time": "2024-09-22T22:02:34.099397",
     "exception": false,
     "start_time": "2024-09-22T22:02:34.088761",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Open Dataframes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "e9dba997",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-22T22:02:34.123187Z",
     "iopub.status.busy": "2024-09-22T22:02:34.122320Z",
     "iopub.status.idle": "2024-09-22T22:02:34.188858Z",
     "shell.execute_reply": "2024-09-22T22:02:34.187755Z"
    },
    "papermill": {
     "duration": 0.080701,
     "end_time": "2024-09-22T22:02:34.191267",
     "exception": false,
     "start_time": "2024-09-22T22:02:34.110566",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>study_id</th>\n",
       "      <th>spinal_canal_stenosis_l1_l2</th>\n",
       "      <th>spinal_canal_stenosis_l2_l3</th>\n",
       "      <th>spinal_canal_stenosis_l3_l4</th>\n",
       "      <th>spinal_canal_stenosis_l4_l5</th>\n",
       "      <th>spinal_canal_stenosis_l5_s1</th>\n",
       "      <th>left_neural_foraminal_narrowing_l1_l2</th>\n",
       "      <th>left_neural_foraminal_narrowing_l2_l3</th>\n",
       "      <th>left_neural_foraminal_narrowing_l3_l4</th>\n",
       "      <th>left_neural_foraminal_narrowing_l4_l5</th>\n",
       "      <th>...</th>\n",
       "      <th>left_subarticular_stenosis_l1_l2</th>\n",
       "      <th>left_subarticular_stenosis_l2_l3</th>\n",
       "      <th>left_subarticular_stenosis_l3_l4</th>\n",
       "      <th>left_subarticular_stenosis_l4_l5</th>\n",
       "      <th>left_subarticular_stenosis_l5_s1</th>\n",
       "      <th>right_subarticular_stenosis_l1_l2</th>\n",
       "      <th>right_subarticular_stenosis_l2_l3</th>\n",
       "      <th>right_subarticular_stenosis_l3_l4</th>\n",
       "      <th>right_subarticular_stenosis_l4_l5</th>\n",
       "      <th>right_subarticular_stenosis_l5_s1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4003253</td>\n",
       "      <td>Normal/Mild</td>\n",
       "      <td>Normal/Mild</td>\n",
       "      <td>Normal/Mild</td>\n",
       "      <td>Normal/Mild</td>\n",
       "      <td>Normal/Mild</td>\n",
       "      <td>Normal/Mild</td>\n",
       "      <td>Normal/Mild</td>\n",
       "      <td>Normal/Mild</td>\n",
       "      <td>Moderate</td>\n",
       "      <td>...</td>\n",
       "      <td>Normal/Mild</td>\n",
       "      <td>Normal/Mild</td>\n",
       "      <td>Normal/Mild</td>\n",
       "      <td>Moderate</td>\n",
       "      <td>Normal/Mild</td>\n",
       "      <td>Normal/Mild</td>\n",
       "      <td>Normal/Mild</td>\n",
       "      <td>Normal/Mild</td>\n",
       "      <td>Normal/Mild</td>\n",
       "      <td>Normal/Mild</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4646740</td>\n",
       "      <td>Normal/Mild</td>\n",
       "      <td>Normal/Mild</td>\n",
       "      <td>Moderate</td>\n",
       "      <td>Severe</td>\n",
       "      <td>Normal/Mild</td>\n",
       "      <td>Normal/Mild</td>\n",
       "      <td>Normal/Mild</td>\n",
       "      <td>Normal/Mild</td>\n",
       "      <td>Moderate</td>\n",
       "      <td>...</td>\n",
       "      <td>Normal/Mild</td>\n",
       "      <td>Normal/Mild</td>\n",
       "      <td>Normal/Mild</td>\n",
       "      <td>Severe</td>\n",
       "      <td>Normal/Mild</td>\n",
       "      <td>Normal/Mild</td>\n",
       "      <td>Moderate</td>\n",
       "      <td>Moderate</td>\n",
       "      <td>Moderate</td>\n",
       "      <td>Normal/Mild</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>7143189</td>\n",
       "      <td>Normal/Mild</td>\n",
       "      <td>Normal/Mild</td>\n",
       "      <td>Normal/Mild</td>\n",
       "      <td>Normal/Mild</td>\n",
       "      <td>Normal/Mild</td>\n",
       "      <td>Normal/Mild</td>\n",
       "      <td>Normal/Mild</td>\n",
       "      <td>Normal/Mild</td>\n",
       "      <td>Normal/Mild</td>\n",
       "      <td>...</td>\n",
       "      <td>Normal/Mild</td>\n",
       "      <td>Normal/Mild</td>\n",
       "      <td>Normal/Mild</td>\n",
       "      <td>Normal/Mild</td>\n",
       "      <td>Normal/Mild</td>\n",
       "      <td>Normal/Mild</td>\n",
       "      <td>Normal/Mild</td>\n",
       "      <td>Normal/Mild</td>\n",
       "      <td>Normal/Mild</td>\n",
       "      <td>Normal/Mild</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>8785691</td>\n",
       "      <td>Normal/Mild</td>\n",
       "      <td>Normal/Mild</td>\n",
       "      <td>Normal/Mild</td>\n",
       "      <td>Normal/Mild</td>\n",
       "      <td>Normal/Mild</td>\n",
       "      <td>Normal/Mild</td>\n",
       "      <td>Normal/Mild</td>\n",
       "      <td>Normal/Mild</td>\n",
       "      <td>Moderate</td>\n",
       "      <td>...</td>\n",
       "      <td>Normal/Mild</td>\n",
       "      <td>Normal/Mild</td>\n",
       "      <td>Normal/Mild</td>\n",
       "      <td>Normal/Mild</td>\n",
       "      <td>Normal/Mild</td>\n",
       "      <td>Normal/Mild</td>\n",
       "      <td>Normal/Mild</td>\n",
       "      <td>Normal/Mild</td>\n",
       "      <td>Normal/Mild</td>\n",
       "      <td>Normal/Mild</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>10728036</td>\n",
       "      <td>Normal/Mild</td>\n",
       "      <td>Normal/Mild</td>\n",
       "      <td>Normal/Mild</td>\n",
       "      <td>Normal/Mild</td>\n",
       "      <td>Normal/Mild</td>\n",
       "      <td>Normal/Mild</td>\n",
       "      <td>Normal/Mild</td>\n",
       "      <td>Normal/Mild</td>\n",
       "      <td>Normal/Mild</td>\n",
       "      <td>...</td>\n",
       "      <td>Normal/Mild</td>\n",
       "      <td>Normal/Mild</td>\n",
       "      <td>Normal/Mild</td>\n",
       "      <td>Normal/Mild</td>\n",
       "      <td>Normal/Mild</td>\n",
       "      <td>Normal/Mild</td>\n",
       "      <td>Normal/Mild</td>\n",
       "      <td>Normal/Mild</td>\n",
       "      <td>Moderate</td>\n",
       "      <td>Normal/Mild</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 26 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   study_id spinal_canal_stenosis_l1_l2 spinal_canal_stenosis_l2_l3  \\\n",
       "0   4003253                 Normal/Mild                 Normal/Mild   \n",
       "1   4646740                 Normal/Mild                 Normal/Mild   \n",
       "2   7143189                 Normal/Mild                 Normal/Mild   \n",
       "3   8785691                 Normal/Mild                 Normal/Mild   \n",
       "4  10728036                 Normal/Mild                 Normal/Mild   \n",
       "\n",
       "  spinal_canal_stenosis_l3_l4 spinal_canal_stenosis_l4_l5  \\\n",
       "0                 Normal/Mild                 Normal/Mild   \n",
       "1                    Moderate                      Severe   \n",
       "2                 Normal/Mild                 Normal/Mild   \n",
       "3                 Normal/Mild                 Normal/Mild   \n",
       "4                 Normal/Mild                 Normal/Mild   \n",
       "\n",
       "  spinal_canal_stenosis_l5_s1 left_neural_foraminal_narrowing_l1_l2  \\\n",
       "0                 Normal/Mild                           Normal/Mild   \n",
       "1                 Normal/Mild                           Normal/Mild   \n",
       "2                 Normal/Mild                           Normal/Mild   \n",
       "3                 Normal/Mild                           Normal/Mild   \n",
       "4                 Normal/Mild                           Normal/Mild   \n",
       "\n",
       "  left_neural_foraminal_narrowing_l2_l3 left_neural_foraminal_narrowing_l3_l4  \\\n",
       "0                           Normal/Mild                           Normal/Mild   \n",
       "1                           Normal/Mild                           Normal/Mild   \n",
       "2                           Normal/Mild                           Normal/Mild   \n",
       "3                           Normal/Mild                           Normal/Mild   \n",
       "4                           Normal/Mild                           Normal/Mild   \n",
       "\n",
       "  left_neural_foraminal_narrowing_l4_l5  ... left_subarticular_stenosis_l1_l2  \\\n",
       "0                              Moderate  ...                      Normal/Mild   \n",
       "1                              Moderate  ...                      Normal/Mild   \n",
       "2                           Normal/Mild  ...                      Normal/Mild   \n",
       "3                              Moderate  ...                      Normal/Mild   \n",
       "4                           Normal/Mild  ...                      Normal/Mild   \n",
       "\n",
       "  left_subarticular_stenosis_l2_l3 left_subarticular_stenosis_l3_l4  \\\n",
       "0                      Normal/Mild                      Normal/Mild   \n",
       "1                      Normal/Mild                      Normal/Mild   \n",
       "2                      Normal/Mild                      Normal/Mild   \n",
       "3                      Normal/Mild                      Normal/Mild   \n",
       "4                      Normal/Mild                      Normal/Mild   \n",
       "\n",
       "  left_subarticular_stenosis_l4_l5 left_subarticular_stenosis_l5_s1  \\\n",
       "0                         Moderate                      Normal/Mild   \n",
       "1                           Severe                      Normal/Mild   \n",
       "2                      Normal/Mild                      Normal/Mild   \n",
       "3                      Normal/Mild                      Normal/Mild   \n",
       "4                      Normal/Mild                      Normal/Mild   \n",
       "\n",
       "  right_subarticular_stenosis_l1_l2 right_subarticular_stenosis_l2_l3  \\\n",
       "0                       Normal/Mild                       Normal/Mild   \n",
       "1                       Normal/Mild                          Moderate   \n",
       "2                       Normal/Mild                       Normal/Mild   \n",
       "3                       Normal/Mild                       Normal/Mild   \n",
       "4                       Normal/Mild                       Normal/Mild   \n",
       "\n",
       "  right_subarticular_stenosis_l3_l4 right_subarticular_stenosis_l4_l5  \\\n",
       "0                       Normal/Mild                       Normal/Mild   \n",
       "1                          Moderate                          Moderate   \n",
       "2                       Normal/Mild                       Normal/Mild   \n",
       "3                       Normal/Mild                       Normal/Mild   \n",
       "4                       Normal/Mild                          Moderate   \n",
       "\n",
       "  right_subarticular_stenosis_l5_s1  \n",
       "0                       Normal/Mild  \n",
       "1                       Normal/Mild  \n",
       "2                       Normal/Mild  \n",
       "3                       Normal/Mild  \n",
       "4                       Normal/Mild  \n",
       "\n",
       "[5 rows x 26 columns]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv('/kaggle/input/rsna-2024-lumbar-spine-degenerative-classification/train.csv')\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0d5111ac",
   "metadata": {
    "papermill": {
     "duration": 0.011422,
     "end_time": "2024-09-22T22:02:34.215336",
     "exception": false,
     "start_time": "2024-09-22T22:02:34.203914",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Change the state to Label.\n",
    "\n",
    "The dataframe contains some Nans, which we will replace with -100 so that We and function can ignore them when calculating the loss and score."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "ee47c4c2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-22T22:02:34.240884Z",
     "iopub.status.busy": "2024-09-22T22:02:34.240222Z",
     "iopub.status.idle": "2024-09-22T22:02:34.255263Z",
     "shell.execute_reply": "2024-09-22T22:02:34.254411Z"
    },
    "papermill": {
     "duration": 0.030205,
     "end_time": "2024-09-22T22:02:34.257470",
     "exception": false,
     "start_time": "2024-09-22T22:02:34.227265",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df = df.fillna(-100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c487726a",
   "metadata": {
    "papermill": {
     "duration": 0.011643,
     "end_time": "2024-09-22T22:02:34.281288",
     "exception": false,
     "start_time": "2024-09-22T22:02:34.269645",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "e6998f01",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-22T22:02:34.306894Z",
     "iopub.status.busy": "2024-09-22T22:02:34.306475Z",
     "iopub.status.idle": "2024-09-22T22:02:34.362092Z",
     "shell.execute_reply": "2024-09-22T22:02:34.360948Z"
    },
    "papermill": {
     "duration": 0.070998,
     "end_time": "2024-09-22T22:02:34.364412",
     "exception": false,
     "start_time": "2024-09-22T22:02:34.293414",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_22/1195170743.py:2: FutureWarning: Downcasting behavior in `replace` is deprecated and will be removed in a future version. To retain the old behavior, explicitly call `result.infer_objects(copy=False)`. To opt-in to the future behavior, set `pd.set_option('future.no_silent_downcasting', True)`\n",
      "  df = df.replace(label2id)\n"
     ]
    }
   ],
   "source": [
    "label2id = {'Normal/Mild': 0, 'Moderate':1, 'Severe':2}\n",
    "df = df.replace(label2id)\n",
    "to_remove=[3008676218, 2780132468, 2492114990, 1234567890]\n",
    "df = df[~df['study_id'].isin(to_remove)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "2c284dc7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-22T22:02:34.389328Z",
     "iopub.status.busy": "2024-09-22T22:02:34.388945Z",
     "iopub.status.idle": "2024-09-22T22:02:34.412601Z",
     "shell.execute_reply": "2024-09-22T22:02:34.411522Z"
    },
    "papermill": {
     "duration": 0.038977,
     "end_time": "2024-09-22T22:02:34.415365",
     "exception": false,
     "start_time": "2024-09-22T22:02:34.376388",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>study_id</th>\n",
       "      <th>spinal_canal_stenosis_l1_l2</th>\n",
       "      <th>spinal_canal_stenosis_l2_l3</th>\n",
       "      <th>spinal_canal_stenosis_l3_l4</th>\n",
       "      <th>spinal_canal_stenosis_l4_l5</th>\n",
       "      <th>spinal_canal_stenosis_l5_s1</th>\n",
       "      <th>left_neural_foraminal_narrowing_l1_l2</th>\n",
       "      <th>left_neural_foraminal_narrowing_l2_l3</th>\n",
       "      <th>left_neural_foraminal_narrowing_l3_l4</th>\n",
       "      <th>left_neural_foraminal_narrowing_l4_l5</th>\n",
       "      <th>...</th>\n",
       "      <th>left_subarticular_stenosis_l1_l2</th>\n",
       "      <th>left_subarticular_stenosis_l2_l3</th>\n",
       "      <th>left_subarticular_stenosis_l3_l4</th>\n",
       "      <th>left_subarticular_stenosis_l4_l5</th>\n",
       "      <th>left_subarticular_stenosis_l5_s1</th>\n",
       "      <th>right_subarticular_stenosis_l1_l2</th>\n",
       "      <th>right_subarticular_stenosis_l2_l3</th>\n",
       "      <th>right_subarticular_stenosis_l3_l4</th>\n",
       "      <th>right_subarticular_stenosis_l4_l5</th>\n",
       "      <th>right_subarticular_stenosis_l5_s1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4003253</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4646740</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>7143189</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>8785691</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>10728036</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1970</th>\n",
       "      <td>4282019580</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1971</th>\n",
       "      <td>4283570761</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1972</th>\n",
       "      <td>4284048608</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1973</th>\n",
       "      <td>4287160193</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1974</th>\n",
       "      <td>4290709089</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1972 rows × 26 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        study_id  spinal_canal_stenosis_l1_l2  spinal_canal_stenosis_l2_l3  \\\n",
       "0        4003253                            0                            0   \n",
       "1        4646740                            0                            0   \n",
       "2        7143189                            0                            0   \n",
       "3        8785691                            0                            0   \n",
       "4       10728036                            0                            0   \n",
       "...          ...                          ...                          ...   \n",
       "1970  4282019580                            0                            0   \n",
       "1971  4283570761                            0                            0   \n",
       "1972  4284048608                            0                            0   \n",
       "1973  4287160193                            0                            1   \n",
       "1974  4290709089                            0                            0   \n",
       "\n",
       "      spinal_canal_stenosis_l3_l4  spinal_canal_stenosis_l4_l5  \\\n",
       "0                               0                            0   \n",
       "1                               1                            2   \n",
       "2                               0                            0   \n",
       "3                               0                            0   \n",
       "4                               0                            0   \n",
       "...                           ...                          ...   \n",
       "1970                            0                            0   \n",
       "1971                            0                            0   \n",
       "1972                            0                            2   \n",
       "1973                            0                            0   \n",
       "1974                            0                            0   \n",
       "\n",
       "      spinal_canal_stenosis_l5_s1  left_neural_foraminal_narrowing_l1_l2  \\\n",
       "0                               0                                      0   \n",
       "1                               0                                      0   \n",
       "2                               0                                      0   \n",
       "3                               0                                      0   \n",
       "4                               0                                      0   \n",
       "...                           ...                                    ...   \n",
       "1970                            0                                      0   \n",
       "1971                            0                                      0   \n",
       "1972                            0                                      0   \n",
       "1973                            0                                      0   \n",
       "1974                            0                                      0   \n",
       "\n",
       "      left_neural_foraminal_narrowing_l2_l3  \\\n",
       "0                                         0   \n",
       "1                                         0   \n",
       "2                                         0   \n",
       "3                                         0   \n",
       "4                                         0   \n",
       "...                                     ...   \n",
       "1970                                      0   \n",
       "1971                                      0   \n",
       "1972                                      0   \n",
       "1973                                      0   \n",
       "1974                                      0   \n",
       "\n",
       "      left_neural_foraminal_narrowing_l3_l4  \\\n",
       "0                                         0   \n",
       "1                                         0   \n",
       "2                                         0   \n",
       "3                                         0   \n",
       "4                                         0   \n",
       "...                                     ...   \n",
       "1970                                      0   \n",
       "1971                                      0   \n",
       "1972                                      0   \n",
       "1973                                      0   \n",
       "1974                                      0   \n",
       "\n",
       "      left_neural_foraminal_narrowing_l4_l5  ...  \\\n",
       "0                                         1  ...   \n",
       "1                                         1  ...   \n",
       "2                                         0  ...   \n",
       "3                                         1  ...   \n",
       "4                                         0  ...   \n",
       "...                                     ...  ...   \n",
       "1970                                      1  ...   \n",
       "1971                                      0  ...   \n",
       "1972                                      0  ...   \n",
       "1973                                      1  ...   \n",
       "1974                                      0  ...   \n",
       "\n",
       "      left_subarticular_stenosis_l1_l2  left_subarticular_stenosis_l2_l3  \\\n",
       "0                                    0                                 0   \n",
       "1                                    0                                 0   \n",
       "2                                    0                                 0   \n",
       "3                                    0                                 0   \n",
       "4                                    0                                 0   \n",
       "...                                ...                               ...   \n",
       "1970                                 0                                 0   \n",
       "1971                                 0                                 0   \n",
       "1972                                 0                                 0   \n",
       "1973                                 0                                 2   \n",
       "1974                                 0                                 0   \n",
       "\n",
       "      left_subarticular_stenosis_l3_l4  left_subarticular_stenosis_l4_l5  \\\n",
       "0                                    0                                 1   \n",
       "1                                    0                                 2   \n",
       "2                                    0                                 0   \n",
       "3                                    0                                 0   \n",
       "4                                    0                                 0   \n",
       "...                                ...                               ...   \n",
       "1970                                 0                                 1   \n",
       "1971                                 0                                 0   \n",
       "1972                                 0                                 2   \n",
       "1973                                 1                                 1   \n",
       "1974                                 0                                 0   \n",
       "\n",
       "      left_subarticular_stenosis_l5_s1  right_subarticular_stenosis_l1_l2  \\\n",
       "0                                    0                                  0   \n",
       "1                                    0                                  0   \n",
       "2                                    0                                  0   \n",
       "3                                    0                                  0   \n",
       "4                                    0                                  0   \n",
       "...                                ...                                ...   \n",
       "1970                                 0                                  0   \n",
       "1971                                 0                                  0   \n",
       "1972                                 0                                  0   \n",
       "1973                                 0                                  0   \n",
       "1974                                 0                                  0   \n",
       "\n",
       "      right_subarticular_stenosis_l2_l3  right_subarticular_stenosis_l3_l4  \\\n",
       "0                                     0                                  0   \n",
       "1                                     1                                  1   \n",
       "2                                     0                                  0   \n",
       "3                                     0                                  0   \n",
       "4                                     0                                  0   \n",
       "...                                 ...                                ...   \n",
       "1970                                  0                                  1   \n",
       "1971                                  0                                  0   \n",
       "1972                                  0                                  0   \n",
       "1973                                  0                                  1   \n",
       "1974                                  0                                  0   \n",
       "\n",
       "      right_subarticular_stenosis_l4_l5  right_subarticular_stenosis_l5_s1  \n",
       "0                                     0                                  0  \n",
       "1                                     1                                  0  \n",
       "2                                     0                                  0  \n",
       "3                                     0                                  0  \n",
       "4                                     1                                  0  \n",
       "...                                 ...                                ...  \n",
       "1970                                  1                                  1  \n",
       "1971                                  0                                  0  \n",
       "1972                                  2                                  0  \n",
       "1973                                  1                                  0  \n",
       "1974                                  0                                  0  \n",
       "\n",
       "[1972 rows x 26 columns]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "79a935ee",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-22T22:02:34.444181Z",
     "iopub.status.busy": "2024-09-22T22:02:34.443840Z",
     "iopub.status.idle": "2024-09-22T22:02:34.448929Z",
     "shell.execute_reply": "2024-09-22T22:02:34.447918Z"
    },
    "papermill": {
     "duration": 0.021192,
     "end_time": "2024-09-22T22:02:34.451012",
     "exception": false,
     "start_time": "2024-09-22T22:02:34.429820",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "CONDITIONS = [\n",
    "    'Spinal Canal Stenosis', \n",
    "    'Left Neural Foraminal Narrowing', \n",
    "    'Right Neural Foraminal Narrowing',\n",
    "    'Left Subarticular Stenosis',\n",
    "    'Right Subarticular Stenosis'\n",
    "]\n",
    "\n",
    "LEVELS = [\n",
    "    'L1/L2',\n",
    "    'L2/L3',\n",
    "    'L3/L4',\n",
    "    'L4/L5',\n",
    "    'L5/S1',\n",
    "]\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "81dcbbed",
   "metadata": {
    "papermill": {
     "duration": 0.012422,
     "end_time": "2024-09-22T22:02:34.476249",
     "exception": false,
     "start_time": "2024-09-22T22:02:34.463827",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "6c310610",
   "metadata": {
    "papermill": {
     "duration": 0.011917,
     "end_time": "2024-09-22T22:02:34.500822",
     "exception": false,
     "start_time": "2024-09-22T22:02:34.488905",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Define Dataset\n",
    "\n",
    "This implementation is very slow and leaves a lot of room for improvement."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "dbe33c8a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-22T22:02:34.528701Z",
     "iopub.status.busy": "2024-09-22T22:02:34.527908Z",
     "iopub.status.idle": "2024-09-22T22:02:34.551075Z",
     "shell.execute_reply": "2024-09-22T22:02:34.549939Z"
    },
    "papermill": {
     "duration": 0.039888,
     "end_time": "2024-09-22T22:02:34.553244",
     "exception": false,
     "start_time": "2024-09-22T22:02:34.513356",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class RSNA24Dataset(Dataset):\n",
    "    def __init__(self, df, phase='train', transform=None,data_dir=data_dir):\n",
    "        self.df = df\n",
    "        self.transform = transform\n",
    "        self.phase = phase\n",
    "        self.data_dir=data_dir\n",
    "        \n",
    "        \n",
    "        \n",
    "        \n",
    "    def __len__(self):\n",
    "        return len(self.df)\n",
    "        \n",
    "    def __getitem__(self, idx):\n",
    "        x = np.zeros((512, 512, 30), dtype=np.uint8)  # Adjust the channel size if needed\n",
    "        \n",
    "        t = self.df.iloc[idx]\n",
    "        st_id = int(t['study_id'])\n",
    "        label = t[1:].values.astype(np.int64)\n",
    "\n",
    "        # Define the paths\n",
    "        p = os.path.join(self.data_dir, f'{st_id}/Sagittal T1')\n",
    "        p2 = os.path.join(self.data_dir, f'{st_id}/Axial T2')\n",
    "        p3 = os.path.join(self.data_dir, f'{st_id}/Sagittal T2_STIR')\n",
    "\n",
    "        # Sampling for Sagittal T1\n",
    "        if len(os.listdir(p)) >= 10:\n",
    "            sampled_indices = random.sample(range(len(os.listdir(p))), 10)\n",
    "        else:\n",
    "            sampled_indices = list(range(len(os.listdir(p))))\n",
    "            random.shuffle(sampled_indices)\n",
    "            sampled_indices = (sampled_indices * ((10 + len(sampled_indices) - 1) // len(sampled_indices)))[:10]\n",
    "\n",
    "        for i, file_idx in enumerate(sampled_indices[:10]):\n",
    "            try:\n",
    "                img_path = os.path.join(p, os.listdir(p)[file_idx])\n",
    "                img = Image.open(img_path).convert('L')\n",
    "                img = np.array(img)\n",
    "                x[..., i] = img.astype(np.uint8)  # Indices 0-9\n",
    "            except Exception as e:\n",
    "                print(f'Error loading image {img_path}: {e}')\n",
    "\n",
    "        # Sampling for Axial\n",
    "        if len(os.listdir(p2)) >= 10:\n",
    "            sampled_indices_p2 = random.sample(range(len(os.listdir(p2))), 10)\n",
    "        else:\n",
    "            sampled_indices_p2 = list(range(len(os.listdir(p2))))\n",
    "            random.shuffle(sampled_indices_p2)\n",
    "            sampled_indices_p2 = (sampled_indices_p2 * ((10 + len(sampled_indices_p2) - 1) // len(sampled_indices_p2)))[:10]\n",
    "\n",
    "        for i, file_idx in enumerate(sampled_indices_p2[:10]):\n",
    "            try:\n",
    "                img_path = os.path.join(p2, os.listdir(p2)[file_idx])\n",
    "                img = Image.open(img_path).convert('L')\n",
    "                img = np.array(img)\n",
    "                x[..., i + 10] = img.astype(np.uint8)  # Indices 10-19\n",
    "            except Exception as e:\n",
    "                print(f'Error loading image {img_path}: {e}')\n",
    "\n",
    "        # Sampling for Sagittal T2/STIR\n",
    "        if len(os.listdir(p3)) >= 10:\n",
    "            sampled_indices_p3 = random.sample(range(len(os.listdir(p3))), 10)\n",
    "        else:\n",
    "            sampled_indices_p3 = list(range(len(os.listdir(p3))))\n",
    "            random.shuffle(sampled_indices_p3)\n",
    "            sampled_indices_p3 = (sampled_indices_p3 * ((10 + len(sampled_indices_p3) - 1) // len(sampled_indices_p3)))[:10]\n",
    "\n",
    "        for i, file_idx in enumerate(sampled_indices_p3[:10]):\n",
    "            try:\n",
    "                img_path = os.path.join(p3, os.listdir(p3)[file_idx])\n",
    "                img = Image.open(img_path).convert('L')\n",
    "                img = np.array(img)\n",
    "                x[..., i + 20] = img.astype(np.uint8)  # Indices 20-29\n",
    "            except Exception as e:\n",
    "                print(f'Error loading image {img_path}: {e}')\n",
    "\n",
    "        assert np.sum(x) > 0  # Ensure that we have valid data\n",
    "\n",
    "        if self.transform is not None:\n",
    "            x = self.transform(image=x)['image']\n",
    "\n",
    "        x = x.transpose(2, 0, 1)  # Change to (C, H, W) format\n",
    "\n",
    "        return x, label\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "b0f62f7c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-22T22:02:34.579969Z",
     "iopub.status.busy": "2024-09-22T22:02:34.579537Z",
     "iopub.status.idle": "2024-09-22T22:02:35.580034Z",
     "shell.execute_reply": "2024-09-22T22:02:35.579035Z"
    },
    "papermill": {
     "duration": 1.018854,
     "end_time": "2024-09-22T22:02:35.584764",
     "exception": false,
     "start_time": "2024-09-22T22:02:34.565910",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([1, 25])\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "tmp_ds = RSNA24Dataset(df, phase='train', transform=None)\n",
    "tmp_dl = DataLoader(\n",
    "            tmp_ds,\n",
    "            batch_size=1,\n",
    "            shuffle=False,\n",
    "            pin_memory=True,\n",
    "            drop_last=False,\n",
    "            num_workers=0\n",
    "            )\n",
    "\n",
    "\n",
    "data_iter = iter(tmp_dl)\n",
    "\n",
    "# Use next() to get the first batch\n",
    "x_batch, labels_batch = next(data_iter)\n",
    "plt.imshow(x_batch[0][0])\n",
    "plt.imshow(x_batch[0][10])\n",
    "plt.imshow(x_batch[0][25])\n",
    "print(labels_batch.shape)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cae0e084",
   "metadata": {
    "papermill": {
     "duration": 0.015433,
     "end_time": "2024-09-22T22:02:35.615929",
     "exception": false,
     "start_time": "2024-09-22T22:02:35.600496",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Define Data Augmentaion\n",
    "Data augmentation is important because the number of images used for training is extremely small.\n",
    "See [this notebook](https://www.kaggle.com/code/haqishen/1st-place-soluiton-code-small-ver) by [Qishen Ha](https://www.kaggle.com/haqishen) for help setting up this augmentation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "0f4d61cc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-22T22:02:35.649955Z",
     "iopub.status.busy": "2024-09-22T22:02:35.649012Z",
     "iopub.status.idle": "2024-09-22T22:02:35.654698Z",
     "shell.execute_reply": "2024-09-22T22:02:35.653675Z"
    },
    "papermill": {
     "duration": 0.024736,
     "end_time": "2024-09-22T22:02:35.657030",
     "exception": false,
     "start_time": "2024-09-22T22:02:35.632294",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# transforms_train = A.Compose([\n",
    "#     A.RandomBrightnessContrast(brightness_limit=(-0.2, 0.2), contrast_limit=(-0.2, 0.2), p=AUG_PROB),\n",
    "#     A.OneOf([\n",
    "#         A.MotionBlur(blur_limit=5),\n",
    "#         A.MedianBlur(blur_limit=5),\n",
    "#         A.GaussianBlur(blur_limit=5),\n",
    "#         A.GaussNoise(var_limit=(5.0, 30.0)),\n",
    "#     ], p=AUG_PROB),\n",
    "\n",
    "#     A.OneOf([\n",
    "#         A.OpticalDistortion(distort_limit=1.0),\n",
    "#         A.GridDistortion(num_steps=5, distort_limit=1.),\n",
    "#         A.ElasticTransform(alpha=3),\n",
    "#     ], p=AUG_PROB),\n",
    "\n",
    "#     A.ShiftScaleRotate(shift_limit=0.1, scale_limit=0.1, rotate_limit=15, border_mode=0, p=AUG_PROB),\n",
    "#     A.Resize(IMG_SIZE[0], IMG_SIZE[1]),\n",
    "#     A.CoarseDropout(max_holes=16, max_height=64, max_width=64, min_holes=1, min_height=8, min_width=8, p=AUG_PROB),    \n",
    "#     A.Normalize(mean=0.5, std=0.5)\n",
    "# ])\n",
    "\n",
    "# transforms_val = A.Compose([\n",
    "#     A.Resize(IMG_SIZE[0], IMG_SIZE[1]),\n",
    "#     A.Normalize(mean=0.5, std=0.5)\n",
    "# ])\n",
    "\n",
    "# if not NOT_DEBUG or not AUG:\n",
    "#     transforms_train = transforms_val"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "02f6ffee",
   "metadata": {
    "papermill": {
     "duration": 0.015377,
     "end_time": "2024-09-22T22:02:35.688481",
     "exception": false,
     "start_time": "2024-09-22T22:02:35.673104",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Trying Data Loader\n",
    "Checking if the data loader works properly."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bb7563c8",
   "metadata": {
    "papermill": {
     "duration": 0.014899,
     "end_time": "2024-09-22T22:02:35.719120",
     "exception": false,
     "start_time": "2024-09-22T22:02:35.704221",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Define Model\n",
    "We use timm, which is commonly used for image classification."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f1c0dfa1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-22T22:02:35.751944Z",
     "iopub.status.busy": "2024-09-22T22:02:35.751494Z",
     "iopub.status.idle": "2024-09-22T22:02:35.758907Z",
     "shell.execute_reply": "2024-09-22T22:02:35.757762Z"
    },
    "papermill": {
     "duration": 0.026562,
     "end_time": "2024-09-22T22:02:35.761250",
     "exception": false,
     "start_time": "2024-09-22T22:02:35.734688",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class RSNA24Model(nn.Module):\n",
    "    def __init__(self, model_name, in_c=30, n_classes=25, pretrained=True, features_only=False):\n",
    "        super().__init__()\n",
    "        self.model = timm.create_model(\n",
    "                                    model_name,\n",
    "                                    pretrained=pretrained, \n",
    "                                    features_only=features_only,\n",
    "                                    in_chans=in_c,\n",
    "                                    num_classes=n_classes,\n",
    "                                    global_pool='avg'\n",
    "                                    )\n",
    "    \n",
    "    def forward(self, x):\n",
    "        y = self.model(x)\n",
    "        return y"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7089bd77",
   "metadata": {
    "papermill": {
     "duration": 0.015543,
     "end_time": "2024-09-22T22:02:35.792992",
     "exception": false,
     "start_time": "2024-09-22T22:02:35.777449",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Testing Model\n",
    "Checking if the model works properly."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a24251af",
   "metadata": {
    "papermill": {
     "duration": 0.015398,
     "end_time": "2024-09-22T22:02:35.824164",
     "exception": false,
     "start_time": "2024-09-22T22:02:35.808766",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Train loop"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "4f048858",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-22T22:02:35.856856Z",
     "iopub.status.busy": "2024-09-22T22:02:35.856462Z",
     "iopub.status.idle": "2024-09-22T23:41:23.224752Z",
     "shell.execute_reply": "2024-09-22T23:41:23.223420Z"
    },
    "papermill": {
     "duration": 5927.387198,
     "end_time": "2024-09-22T23:41:23.227024",
     "exception": false,
     "start_time": "2024-09-22T22:02:35.839826",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_22/96588401.py:2: FutureWarning: `torch.cuda.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cuda', args...)` instead.\n",
      "  autocast = torch.cuda.amp.autocast(enabled=USE_AMP, dtype=torch.half) # you can use with T4 gpu. or newer\n",
      "/tmp/ipykernel_22/96588401.py:3: FutureWarning: `torch.cuda.amp.GradScaler(args...)` is deprecated. Please use `torch.amp.GradScaler('cuda', args...)` instead.\n",
      "  scaler = torch.cuda.amp.GradScaler(enabled=USE_AMP, init_scale=4096)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "##############################\n",
      "start fold0\n",
      "##############################\n",
      "1577 395\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "7dad6ebafcb6413ea47e377a9210f34b",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "model.safetensors:   0%|          | 0.00/49.3M [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "start epoch 1\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 98/98 [02:42<00:00,  1.66s/it, loss=1.025806, lr=9.796e-05]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_loss:0.994716\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 13/13 [00:43<00:00,  3.36s/it]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val_loss:0.823956, val_wll:0.872799\n",
      "epoch:1, best loss updated from 1.200000 to 0.823956\n",
      "epoch:1, best wll_metric updated from 1.200000 to 0.872799\n",
      "start epoch 2\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 98/98 [01:58<00:00,  1.20s/it, loss=0.693165, lr=1.980e-04]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_loss:0.747487\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 13/13 [00:29<00:00,  2.28s/it]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val_loss:0.735267, val_wll:0.787726\n",
      "epoch:2, best loss updated from 0.823956 to 0.735267\n",
      "epoch:2, best wll_metric updated from 0.872799 to 0.787726\n",
      "start epoch 3\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 98/98 [01:55<00:00,  1.17s/it, loss=0.776951, lr=1.987e-04]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_loss:0.682399\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 13/13 [00:28<00:00,  2.23s/it]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val_loss:0.714886, val_wll:0.764209\n",
      "epoch:3, best loss updated from 0.735267 to 0.714886\n",
      "epoch:3, best wll_metric updated from 0.787726 to 0.764209\n",
      "start epoch 4\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 98/98 [01:53<00:00,  1.16s/it, loss=0.521379, lr=1.947e-04]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_loss:0.647250\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 13/13 [00:28<00:00,  2.23s/it]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val_loss:0.705052, val_wll:0.755215\n",
      "epoch:4, best loss updated from 0.714886 to 0.705052\n",
      "epoch:4, best wll_metric updated from 0.764209 to 0.755215\n",
      "start epoch 5\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 98/98 [01:52<00:00,  1.15s/it, loss=0.596204, lr=1.880e-04]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_loss:0.612752\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 13/13 [00:28<00:00,  2.17s/it]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val_loss:0.733380, val_wll:0.786204\n",
      "start epoch 6\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 98/98 [01:53<00:00,  1.15s/it, loss=0.529718, lr=1.790e-04]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_loss:0.570510\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 13/13 [00:27<00:00,  2.11s/it]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val_loss:0.726366, val_wll:0.779363\n",
      "start epoch 7\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 98/98 [01:52<00:00,  1.14s/it, loss=0.494291, lr=1.678e-04]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_loss:0.538924\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 13/13 [00:27<00:00,  2.15s/it]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val_loss:0.732072, val_wll:0.783137\n",
      "early stopping\n",
      "##############################\n",
      "start fold1\n",
      "##############################\n",
      "1577 395\n",
      "start epoch 1\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 98/98 [01:49<00:00,  1.12s/it, loss=0.814693, lr=9.796e-05]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_loss:0.995000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 13/13 [00:27<00:00,  2.10s/it]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val_loss:0.788845, val_wll:0.848743\n",
      "epoch:1, best loss updated from 1.200000 to 0.788845\n",
      "epoch:1, best wll_metric updated from 1.200000 to 0.848743\n",
      "start epoch 2\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 98/98 [01:49<00:00,  1.12s/it, loss=0.722922, lr=1.980e-04]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_loss:0.743083\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 13/13 [00:27<00:00,  2.13s/it]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val_loss:0.713157, val_wll:0.776004\n",
      "epoch:2, best loss updated from 0.788845 to 0.713157\n",
      "epoch:2, best wll_metric updated from 0.848743 to 0.776004\n",
      "start epoch 3\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 98/98 [01:49<00:00,  1.11s/it, loss=0.717063, lr=1.987e-04]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_loss:0.683663\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 13/13 [00:26<00:00,  2.07s/it]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val_loss:0.682116, val_wll:0.743796\n",
      "epoch:3, best loss updated from 0.713157 to 0.682116\n",
      "epoch:3, best wll_metric updated from 0.776004 to 0.743796\n",
      "start epoch 4\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 98/98 [01:49<00:00,  1.12s/it, loss=0.666538, lr=1.947e-04]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_loss:0.644946\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 13/13 [00:27<00:00,  2.09s/it]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val_loss:0.679718, val_wll:0.742101\n",
      "epoch:4, best loss updated from 0.682116 to 0.679718\n",
      "epoch:4, best wll_metric updated from 0.743796 to 0.742101\n",
      "start epoch 5\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 98/98 [01:49<00:00,  1.12s/it, loss=0.732167, lr=1.880e-04]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_loss:0.610275\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 13/13 [00:27<00:00,  2.11s/it]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val_loss:0.675020, val_wll:0.734239\n",
      "epoch:5, best loss updated from 0.679718 to 0.675020\n",
      "epoch:5, best wll_metric updated from 0.742101 to 0.734239\n",
      "start epoch 6\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 98/98 [01:48<00:00,  1.11s/it, loss=0.509895, lr=1.790e-04]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_loss:0.577450\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 13/13 [00:27<00:00,  2.09s/it]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val_loss:0.679463, val_wll:0.739319\n",
      "start epoch 7\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 98/98 [01:48<00:00,  1.11s/it, loss=0.520603, lr=1.678e-04]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_loss:0.546023\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 13/13 [00:26<00:00,  2.07s/it]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val_loss:0.706222, val_wll:0.772301\n",
      "start epoch 8\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 98/98 [01:48<00:00,  1.11s/it, loss=0.547135, lr=1.547e-04]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_loss:0.504475\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 13/13 [00:26<00:00,  2.05s/it]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val_loss:0.707381, val_wll:0.774762\n",
      "early stopping\n",
      "##############################\n",
      "start fold2\n",
      "##############################\n",
      "1578 394\n",
      "start epoch 1\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 98/98 [01:49<00:00,  1.12s/it, loss=0.702425, lr=9.796e-05]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_loss:0.982732\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 13/13 [00:29<00:00,  2.26s/it]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val_loss:0.788793, val_wll:0.856576\n",
      "epoch:1, best loss updated from 1.200000 to 0.788793\n",
      "epoch:1, best wll_metric updated from 1.200000 to 0.856576\n",
      "start epoch 2\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 98/98 [01:49<00:00,  1.11s/it, loss=0.768081, lr=1.980e-04]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_loss:0.736539\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 13/13 [00:26<00:00,  2.07s/it]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val_loss:0.721724, val_wll:0.786220\n",
      "epoch:2, best loss updated from 0.788793 to 0.721724\n",
      "epoch:2, best wll_metric updated from 0.856576 to 0.786220\n",
      "start epoch 3\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 98/98 [01:49<00:00,  1.11s/it, loss=0.799098, lr=1.987e-04]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_loss:0.678456\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 13/13 [00:26<00:00,  2.07s/it]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val_loss:0.698945, val_wll:0.762854\n",
      "epoch:3, best loss updated from 0.721724 to 0.698945\n",
      "epoch:3, best wll_metric updated from 0.786220 to 0.762854\n",
      "start epoch 4\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 98/98 [01:49<00:00,  1.12s/it, loss=0.567629, lr=1.947e-04]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_loss:0.638963\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 13/13 [00:26<00:00,  2.02s/it]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val_loss:0.693139, val_wll:0.752443\n",
      "epoch:4, best loss updated from 0.698945 to 0.693139\n",
      "epoch:4, best wll_metric updated from 0.762854 to 0.752443\n",
      "start epoch 5\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 98/98 [01:49<00:00,  1.11s/it, loss=0.635414, lr=1.880e-04]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_loss:0.617945\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 13/13 [00:26<00:00,  2.03s/it]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val_loss:0.704333, val_wll:0.760977\n",
      "start epoch 6\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 98/98 [01:48<00:00,  1.11s/it, loss=0.548184, lr=1.790e-04]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_loss:0.589876\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 13/13 [00:26<00:00,  2.06s/it]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val_loss:0.692942, val_wll:0.755295\n",
      "epoch:6, best loss updated from 0.693139 to 0.692942\n",
      "start epoch 7\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 98/98 [01:48<00:00,  1.10s/it, loss=0.627456, lr=1.678e-04]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_loss:0.556645\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 13/13 [00:26<00:00,  2.06s/it]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val_loss:0.683738, val_wll:0.745556\n",
      "epoch:7, best loss updated from 0.692942 to 0.683738\n",
      "epoch:7, best wll_metric updated from 0.752443 to 0.745556\n",
      "start epoch 8\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 98/98 [01:49<00:00,  1.11s/it, loss=0.543047, lr=1.547e-04]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_loss:0.521409\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 13/13 [00:26<00:00,  2.05s/it]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val_loss:0.713395, val_wll:0.768255\n",
      "start epoch 9\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 98/98 [01:48<00:00,  1.11s/it, loss=0.487460, lr=1.402e-04]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_loss:0.487290\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 13/13 [00:26<00:00,  2.03s/it]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val_loss:0.714035, val_wll:0.769745\n",
      "start epoch 10\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 98/98 [01:48<00:00,  1.10s/it, loss=0.466727, lr=1.245e-04]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_loss:0.444154\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 13/13 [00:25<00:00,  1.99s/it]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val_loss:0.716046, val_wll:0.777096\n",
      "early stopping\n",
      "##############################\n",
      "start fold3\n",
      "##############################\n",
      "1578 394\n",
      "start epoch 1\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 98/98 [01:48<00:00,  1.11s/it, loss=0.937623, lr=9.796e-05]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_loss:0.985714\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 13/13 [00:26<00:00,  2.06s/it]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val_loss:0.792921, val_wll:0.843810\n",
      "epoch:1, best loss updated from 1.200000 to 0.792921\n",
      "epoch:1, best wll_metric updated from 1.200000 to 0.843810\n",
      "start epoch 2\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 98/98 [01:46<00:00,  1.09s/it, loss=0.704891, lr=1.980e-04]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_loss:0.745341\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 13/13 [00:26<00:00,  2.03s/it]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val_loss:0.711257, val_wll:0.758486\n",
      "epoch:2, best loss updated from 0.792921 to 0.711257\n",
      "epoch:2, best wll_metric updated from 0.843810 to 0.758486\n",
      "start epoch 3\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 98/98 [01:48<00:00,  1.10s/it, loss=0.814936, lr=1.987e-04]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_loss:0.687948\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 13/13 [00:26<00:00,  2.02s/it]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val_loss:0.692076, val_wll:0.735583\n",
      "epoch:3, best loss updated from 0.711257 to 0.692076\n",
      "epoch:3, best wll_metric updated from 0.758486 to 0.735583\n",
      "start epoch 4\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 98/98 [01:47<00:00,  1.10s/it, loss=0.552844, lr=1.947e-04]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_loss:0.643534\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 13/13 [00:26<00:00,  2.02s/it]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val_loss:0.691074, val_wll:0.734102\n",
      "epoch:4, best loss updated from 0.692076 to 0.691074\n",
      "epoch:4, best wll_metric updated from 0.735583 to 0.734102\n",
      "start epoch 5\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 98/98 [01:47<00:00,  1.10s/it, loss=0.581612, lr=1.880e-04]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_loss:0.611833\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 13/13 [00:26<00:00,  2.06s/it]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val_loss:0.684636, val_wll:0.727244\n",
      "epoch:5, best loss updated from 0.691074 to 0.684636\n",
      "epoch:5, best wll_metric updated from 0.734102 to 0.727244\n",
      "start epoch 6\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 98/98 [01:47<00:00,  1.10s/it, loss=0.608423, lr=1.790e-04]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_loss:0.580898\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 13/13 [00:26<00:00,  2.00s/it]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val_loss:0.684623, val_wll:0.727499\n",
      "epoch:6, best loss updated from 0.684636 to 0.684623\n",
      "start epoch 7\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 98/98 [01:48<00:00,  1.10s/it, loss=0.599847, lr=1.678e-04]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_loss:0.550299\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 13/13 [00:25<00:00,  2.00s/it]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val_loss:0.692134, val_wll:0.734324\n",
      "start epoch 8\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 98/98 [01:47<00:00,  1.10s/it, loss=0.384648, lr=1.547e-04]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_loss:0.511574\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 13/13 [00:26<00:00,  2.06s/it]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val_loss:0.701481, val_wll:0.751077\n",
      "start epoch 9\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 98/98 [01:46<00:00,  1.09s/it, loss=0.413926, lr=1.402e-04]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_loss:0.466326\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 13/13 [00:26<00:00,  2.05s/it]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val_loss:0.719853, val_wll:0.768852\n",
      "early stopping\n",
      "##############################\n",
      "start fold4\n",
      "##############################\n",
      "1578 394\n",
      "start epoch 1\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 98/98 [01:47<00:00,  1.10s/it, loss=0.882282, lr=9.796e-05]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_loss:0.994360\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 13/13 [00:26<00:00,  2.04s/it]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val_loss:0.783297, val_wll:0.854396\n",
      "epoch:1, best loss updated from 1.200000 to 0.783297\n",
      "epoch:1, best wll_metric updated from 1.200000 to 0.854396\n",
      "start epoch 2\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 98/98 [01:47<00:00,  1.09s/it, loss=0.721334, lr=1.980e-04]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_loss:0.748430\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 13/13 [00:26<00:00,  2.02s/it]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val_loss:0.710295, val_wll:0.785477\n",
      "epoch:2, best loss updated from 0.783297 to 0.710295\n",
      "epoch:2, best wll_metric updated from 0.854396 to 0.785477\n",
      "start epoch 3\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 98/98 [01:46<00:00,  1.09s/it, loss=0.730130, lr=1.987e-04]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_loss:0.692391\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 13/13 [00:26<00:00,  2.04s/it]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val_loss:0.676909, val_wll:0.747869\n",
      "epoch:3, best loss updated from 0.710295 to 0.676909\n",
      "epoch:3, best wll_metric updated from 0.785477 to 0.747869\n",
      "start epoch 4\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 98/98 [01:47<00:00,  1.10s/it, loss=0.568114, lr=1.947e-04]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_loss:0.643165\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 13/13 [00:25<00:00,  1.97s/it]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val_loss:0.680800, val_wll:0.756645\n",
      "start epoch 5\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 98/98 [01:47<00:00,  1.10s/it, loss=0.584572, lr=1.880e-04]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_loss:0.609015\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 13/13 [00:26<00:00,  2.01s/it]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val_loss:0.695824, val_wll:0.772274\n",
      "start epoch 6\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 98/98 [01:47<00:00,  1.10s/it, loss=0.604627, lr=1.790e-04]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_loss:0.580012\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 13/13 [00:26<00:00,  2.04s/it]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val_loss:0.670857, val_wll:0.736170\n",
      "epoch:6, best loss updated from 0.676909 to 0.670857\n",
      "epoch:6, best wll_metric updated from 0.747869 to 0.736170\n",
      "start epoch 7\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 98/98 [01:47<00:00,  1.09s/it, loss=0.508015, lr=1.678e-04]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_loss:0.540576\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 13/13 [00:26<00:00,  2.01s/it]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val_loss:0.686061, val_wll:0.757547\n",
      "start epoch 8\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 98/98 [01:46<00:00,  1.09s/it, loss=0.548452, lr=1.547e-04]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_loss:0.494903\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 13/13 [00:26<00:00,  2.04s/it]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val_loss:0.725081, val_wll:0.800321\n",
      "start epoch 9\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 98/98 [01:46<00:00,  1.08s/it, loss=0.351836, lr=1.402e-04]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_loss:0.449437\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 13/13 [00:26<00:00,  2.02s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val_loss:0.724220, val_wll:0.802840\n",
      "early stopping\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "#autocast = torch.cuda.amp.autocast(enabled=USE_AMP, dtype=torch.bfloat16) # if your gpu is newer Ampere, you can use this, lesser appearance of nan than half\n",
    "autocast = torch.cuda.amp.autocast(enabled=USE_AMP, dtype=torch.half) # you can use with T4 gpu. or newer\n",
    "scaler = torch.cuda.amp.GradScaler(enabled=USE_AMP, init_scale=4096)\n",
    "\n",
    "skf = KFold(n_splits=N_FOLDS, shuffle=True, random_state=SEED)\n",
    "for fold, (trn_idx, val_idx) in enumerate(skf.split(range(len(df)))):\n",
    "    print('#'*30)\n",
    "    print(f'start fold{fold}')\n",
    "    print('#'*30)\n",
    "    print(len(trn_idx), len(val_idx))\n",
    "    df_train = df.iloc[trn_idx]\n",
    "    df_valid = df.iloc[val_idx]\n",
    "\n",
    "    train_ds = RSNA24Dataset(df_train, phase='train', transform=None)\n",
    "    train_dl = DataLoader(\n",
    "                train_ds,\n",
    "                batch_size=BATCH_SIZE,\n",
    "                shuffle=True,\n",
    "                pin_memory=True,\n",
    "                drop_last=True,\n",
    "                num_workers=N_WORKERS\n",
    "                )\n",
    "\n",
    "    valid_ds = RSNA24Dataset(df_valid, phase='valid', transform=None)\n",
    "    valid_dl = DataLoader(\n",
    "                valid_ds,\n",
    "                batch_size=BATCH_SIZE*2,\n",
    "                shuffle=False,\n",
    "                pin_memory=True,\n",
    "                drop_last=False,\n",
    "                num_workers=N_WORKERS\n",
    "                )\n",
    "\n",
    "    model = RSNA24Model(MODEL_NAME, in_c=IN_CHANS, n_classes=N_CLASSES, pretrained=True)\n",
    "    model.to(device)\n",
    "#     print(model)\n",
    "    \n",
    "    optimizer = AdamW(model.parameters(), lr=LR, weight_decay=WD)\n",
    "\n",
    "    warmup_steps = EPOCHS/10 * len(train_dl) // GRAD_ACC\n",
    "    num_total_steps = EPOCHS * len(train_dl) // GRAD_ACC\n",
    "    num_cycles = 0.475\n",
    "    scheduler = get_cosine_schedule_with_warmup(optimizer,\n",
    "                                                num_warmup_steps=warmup_steps,\n",
    "                                                num_training_steps=num_total_steps,\n",
    "                                                num_cycles=num_cycles)\n",
    "\n",
    "    weights = torch.tensor([1.0, 2.0, 4.0])\n",
    "    criterion = nn.CrossEntropyLoss(weight=weights.to(device))\n",
    "    criterion2 = nn.CrossEntropyLoss(weight=weights)\n",
    "\n",
    "    best_loss = 1.2\n",
    "    best_wll = 1.2\n",
    "    es_step = 0\n",
    "\n",
    "    for epoch in range(1, EPOCHS+1):\n",
    "        print(f'start epoch {epoch}')\n",
    "        model.train()\n",
    "        total_loss = 0\n",
    "        with tqdm(train_dl, leave=True) as pbar:\n",
    "            optimizer.zero_grad()\n",
    "            for idx, (x, t) in enumerate(pbar):  \n",
    "                x = x.to(device)\n",
    "                x = x.to(device).half()  # Ensure x is in half precision\n",
    "                t = t.to(device)\n",
    "                \n",
    "                with autocast:\n",
    "                    loss = 0\n",
    "                    y = model(x)\n",
    "                    for col in range(N_LABELS):\n",
    "                        pred = y[:,col*3:col*3+3]\n",
    "                        gt = t[:,col]\n",
    "                        loss = loss + criterion(pred, gt) / N_LABELS\n",
    "                        \n",
    "                    total_loss += loss.item()\n",
    "                    if GRAD_ACC > 1:\n",
    "                        loss = loss / GRAD_ACC\n",
    "    \n",
    "                if not math.isfinite(loss):\n",
    "                    print(f\"Loss is {loss}, stopping training\")\n",
    "                    sys.exit(1)\n",
    "    \n",
    "                pbar.set_postfix(\n",
    "                    OrderedDict(\n",
    "                        loss=f'{loss.item()*GRAD_ACC:.6f}',\n",
    "                        lr=f'{optimizer.param_groups[0][\"lr\"]:.3e}'\n",
    "                    )\n",
    "                )\n",
    "                scaler.scale(loss).backward()\n",
    "\n",
    "                torch.nn.utils.clip_grad_norm_(model.parameters(), MAX_GRAD_NORM or 1e9)\n",
    "                \n",
    "                if (idx + 1) % GRAD_ACC == 0:\n",
    "                    scaler.step(optimizer)\n",
    "                    scaler.update()\n",
    "                    optimizer.zero_grad()\n",
    "                    if scheduler is not None:\n",
    "                        scheduler.step()                    \n",
    "    \n",
    "        train_loss = total_loss/len(train_dl)\n",
    "        print(f'train_loss:{train_loss:.6f}')\n",
    "\n",
    "        total_loss = 0\n",
    "        y_preds = []\n",
    "        labels = []\n",
    "        \n",
    "        model.eval()\n",
    "        with tqdm(valid_dl, leave=True) as pbar:\n",
    "            with torch.no_grad():\n",
    "                for idx, (x, t) in enumerate(pbar):\n",
    "                    \n",
    "                    x = x.to(device).half()\n",
    "                    t = t.to(device)\n",
    "                        \n",
    "                    with autocast:\n",
    "                        loss = 0\n",
    "                        loss_ema = 0\n",
    "                        y = model(x)\n",
    "                        for col in range(N_LABELS):\n",
    "                            pred = y[:,col*3:col*3+3]\n",
    "                            gt = t[:,col]\n",
    " \n",
    "                            loss = loss + criterion(pred, gt) / N_LABELS\n",
    "                            y_pred = pred.float()\n",
    "                            y_preds.append(y_pred.cpu())\n",
    "                            labels.append(gt.cpu())\n",
    "                        \n",
    "                        total_loss += loss.item()   \n",
    "    \n",
    "        val_loss = total_loss/len(valid_dl)\n",
    "        \n",
    "        y_preds = torch.cat(y_preds, dim=0)\n",
    "        labels = torch.cat(labels)\n",
    "        val_wll = criterion2(y_preds, labels)\n",
    "        \n",
    "        print(f'val_loss:{val_loss:.6f}, val_wll:{val_wll:.6f}')\n",
    "\n",
    "        if val_loss < best_loss or val_wll < best_wll:\n",
    "            \n",
    "            es_step = 0\n",
    "\n",
    "            if device!='cuda:0':\n",
    "                model.to('cuda:0')                \n",
    "                \n",
    "            if val_loss < best_loss:\n",
    "                print(f'epoch:{epoch}, best loss updated from {best_loss:.6f} to {val_loss:.6f}')\n",
    "                best_loss = val_loss\n",
    "                \n",
    "            if val_wll < best_wll:\n",
    "                print(f'epoch:{epoch}, best wll_metric updated from {best_wll:.6f} to {val_wll:.6f}')\n",
    "                best_wll = val_wll\n",
    "                fname = f'{OUTPUT_DIR}/best_wll_model_fold-{fold}.pt'\n",
    "                torch.save(model.state_dict(), fname)\n",
    "            \n",
    "            if device!='cuda:0':\n",
    "                model.to(device)\n",
    "            \n",
    "        else:\n",
    "            es_step += 1\n",
    "            if es_step >= EARLY_STOPPING_EPOCH:\n",
    "                print('early stopping')\n",
    "                break  \n",
    "                                "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3a53c45b",
   "metadata": {
    "papermill": {
     "duration": 0.787198,
     "end_time": "2024-09-22T23:41:24.859414",
     "exception": false,
     "start_time": "2024-09-22T23:41:24.072216",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f79f601b",
   "metadata": {
    "papermill": {
     "duration": 0.831162,
     "end_time": "2024-09-22T23:41:26.475104",
     "exception": false,
     "start_time": "2024-09-22T23:41:25.643942",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Calculation CV"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "75e88701",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-22T23:41:28.150117Z",
     "iopub.status.busy": "2024-09-22T23:41:28.149660Z",
     "iopub.status.idle": "2024-09-22T23:43:53.759544Z",
     "shell.execute_reply": "2024-09-22T23:43:53.758244Z"
    },
    "papermill": {
     "duration": 146.499164,
     "end_time": "2024-09-22T23:43:53.762202",
     "exception": false,
     "start_time": "2024-09-22T23:41:27.263038",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "##############################\n",
      "start fold0\n",
      "##############################\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_22/2675027257.py:24: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n",
      "  model.load_state_dict(torch.load(fname))\n",
      "100%|██████████| 395/395 [00:29<00:00, 13.56it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "##############################\n",
      "start fold1\n",
      "##############################\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 395/395 [00:28<00:00, 13.90it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "##############################\n",
      "start fold2\n",
      "##############################\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 394/394 [00:28<00:00, 13.79it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "##############################\n",
      "start fold3\n",
      "##############################\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 394/394 [00:28<00:00, 13.83it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "##############################\n",
      "start fold4\n",
      "##############################\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 394/394 [00:28<00:00, 13.79it/s]\n"
     ]
    }
   ],
   "source": [
    "cv = 0\n",
    "y_preds = []\n",
    "labels = []\n",
    "weights = torch.tensor([1.0, 2.0, 4.0])\n",
    "criterion2 = nn.CrossEntropyLoss(weight=weights)\n",
    "\n",
    "for fold, (trn_idx, val_idx) in enumerate(skf.split(range(len(df)))):\n",
    "    print('#'*30)\n",
    "    print(f'start fold{fold}')\n",
    "    print('#'*30)\n",
    "    df_valid = df.iloc[val_idx]\n",
    "    valid_ds = RSNA24Dataset(df_valid, phase='valid', transform=None)\n",
    "    valid_dl = DataLoader(\n",
    "                valid_ds,\n",
    "                batch_size=1,\n",
    "                shuffle=False,\n",
    "                pin_memory=True,\n",
    "                drop_last=False,\n",
    "                num_workers=N_WORKERS\n",
    "                )\n",
    "\n",
    "    model = RSNA24Model(MODEL_NAME, IN_CHANS, N_CLASSES, pretrained=False)\n",
    "    fname = f'{OUTPUT_DIR}/best_wll_model_fold-{fold}.pt'\n",
    "    model.load_state_dict(torch.load(fname))\n",
    "    model.to(device)   \n",
    "    \n",
    "    model.eval()\n",
    "    with tqdm(valid_dl, leave=True) as pbar:\n",
    "        with torch.no_grad():\n",
    "            for idx, (x, t) in enumerate(pbar):\n",
    "                \n",
    "                x = x.to(device).half()  # Ensure x is in half precision\n",
    "                t = t.to(device)\n",
    "                    \n",
    "                with autocast:\n",
    "                    y = model(x)\n",
    "                    for col in range(N_LABELS):\n",
    "                        pred = y[:,col*3:col*3+3]\n",
    "                        gt = t[:,col] \n",
    "                        y_pred = pred.float()\n",
    "                        y_preds.append(y_pred.cpu())\n",
    "                        labels.append(gt.cpu())\n",
    "\n",
    "y_preds = torch.cat(y_preds)\n",
    "labels = torch.cat(labels)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "71c9007a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-22T23:43:55.541290Z",
     "iopub.status.busy": "2024-09-22T23:43:55.540864Z",
     "iopub.status.idle": "2024-09-22T23:43:55.549329Z",
     "shell.execute_reply": "2024-09-22T23:43:55.548226Z"
    },
    "papermill": {
     "duration": 0.876729,
     "end_time": "2024-09-22T23:43:55.551565",
     "exception": false,
     "start_time": "2024-09-22T23:43:54.674836",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "cv score: 0.7367686033248901\n"
     ]
    }
   ],
   "source": [
    "cv = criterion2(y_preds, labels)\n",
    "print('cv score:', cv.item())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "db9cef0b",
   "metadata": {
    "papermill": {
     "duration": 0.85258,
     "end_time": "2024-09-22T23:43:57.307825",
     "exception": false,
     "start_time": "2024-09-22T23:43:56.455245",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Calculation Competition Metrics\n",
    "This will give a slightly different score, probably due to the different behavior for nan."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "b46a3a27",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-22T23:43:59.103162Z",
     "iopub.status.busy": "2024-09-22T23:43:59.102381Z",
     "iopub.status.idle": "2024-09-22T23:43:59.852018Z",
     "shell.execute_reply": "2024-09-22T23:43:59.851032Z"
    },
    "papermill": {
     "duration": 1.613482,
     "end_time": "2024-09-22T23:43:59.854408",
     "exception": false,
     "start_time": "2024-09-22T23:43:58.240926",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "cv score: 0.7367684888256287\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import log_loss\n",
    "y_pred_np = y_preds.softmax(1).numpy()\n",
    "labels_np = labels.numpy()\n",
    "y_pred_nan = np.zeros((y_preds.shape[0], 1))\n",
    "y_pred2 = np.concatenate([y_pred_nan, y_pred_np],axis=1)\n",
    "weights = []\n",
    "for l in labels:\n",
    "    if l==0: weights.append(1)\n",
    "    elif l==1: weights.append(2)\n",
    "    elif l==2: weights.append(4)\n",
    "    else: weights.append(0)\n",
    "cv2 = log_loss(labels, y_pred2, normalize=True, sample_weight=weights)\n",
    "print('cv score:', cv2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "4c206d49",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-22T23:44:01.637595Z",
     "iopub.status.busy": "2024-09-22T23:44:01.637178Z",
     "iopub.status.idle": "2024-09-22T23:44:01.644998Z",
     "shell.execute_reply": "2024-09-22T23:44:01.644168Z"
    },
    "papermill": {
     "duration": 0.914027,
     "end_time": "2024-09-22T23:44:01.647091",
     "exception": false,
     "start_time": "2024-09-22T23:44:00.733064",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "np.save(f'{OUTPUT_DIR}/labels.npy', labels_np)\n",
    "np.save(f'{OUTPUT_DIR}/final_oof.npy', y_pred2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "db266d4a",
   "metadata": {
    "papermill": {
     "duration": 0.926107,
     "end_time": "2024-09-22T23:44:03.443371",
     "exception": false,
     "start_time": "2024-09-22T23:44:02.517264",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# When predictions are random\n",
    "gets around 1.1."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "61bdb3a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-22T23:44:05.204048Z",
     "iopub.status.busy": "2024-09-22T23:44:05.203583Z",
     "iopub.status.idle": "2024-09-22T23:44:05.228077Z",
     "shell.execute_reply": "2024-09-22T23:44:05.226833Z"
    },
    "papermill": {
     "duration": 0.935415,
     "end_time": "2024-09-22T23:44:05.230675",
     "exception": false,
     "start_time": "2024-09-22T23:44:04.295260",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "random score: 1.0986122886681102\n"
     ]
    }
   ],
   "source": [
    "random_pred = np.ones((y_preds.shape[0], 3)) / 3.0\n",
    "y_pred3 = np.concatenate([y_pred_nan, random_pred],axis=1)\n",
    "cv3 = log_loss(labels, y_pred3, normalize=True, sample_weight=weights)\n",
    "print('random score:', cv3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "935d9296",
   "metadata": {
    "papermill": {
     "duration": 0.899516,
     "end_time": "2024-09-22T23:44:06.984286",
     "exception": false,
     "start_time": "2024-09-22T23:44:06.084770",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Continuing with the [Submission Baseline...](https://www.kaggle.com/code/itsuki9180/rsna2024-lsdc-submission-baseline)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "671dd396",
   "metadata": {
    "papermill": {
     "duration": 0.87424,
     "end_time": "2024-09-22T23:44:08.721113",
     "exception": false,
     "start_time": "2024-09-22T23:44:07.846873",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "nvidiaTeslaT4",
   "dataSources": [
    {
     "databundleVersionId": 8561470,
     "sourceId": 71549,
     "sourceType": "competition"
    },
    {
     "datasetId": 5710799,
     "sourceId": 9406054,
     "sourceType": "datasetVersion"
    },
    {
     "sourceId": 183439689,
     "sourceType": "kernelVersion"
    }
   ],
   "dockerImageVersionId": 30762,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 6111.959149,
   "end_time": "2024-09-22T23:44:12.851507",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-09-22T22:02:20.892358",
   "version": "2.6.0"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "103971ba04d84d64b30c9b382a970027": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_e0971f9930484af79af4eb7ae0def661",
       "placeholder": "​",
       "style": "IPY_MODEL_d9a7911153104664b45de84a84693a8c",
       "value": "model.safetensors: 100%"
      }
     },
     "3274d31048234f39aca2acf6d45e8cb7": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "55a2316d467340aa8735fe4ad5023005": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_5b7c797b2b2548269d2c5c4bd45e17d9",
       "placeholder": "​",
       "style": "IPY_MODEL_9ab682af8f7e4e46aa019272a5b85034",
       "value": " 49.3M/49.3M [00:00&lt;00:00, 72.2MB/s]"
      }
     },
     "5b7c797b2b2548269d2c5c4bd45e17d9": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "7dad6ebafcb6413ea47e377a9210f34b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_103971ba04d84d64b30c9b382a970027",
        "IPY_MODEL_f3cdcd52c10144dca5e9e8a7aa4789a8",
        "IPY_MODEL_55a2316d467340aa8735fe4ad5023005"
       ],
       "layout": "IPY_MODEL_3274d31048234f39aca2acf6d45e8cb7"
      }
     },
     "85ee491a7c634dd2af540e9821372394": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "9ab682af8f7e4e46aa019272a5b85034": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "d6542fe8354b4469b1735b97cb555919": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "d9a7911153104664b45de84a84693a8c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "e0971f9930484af79af4eb7ae0def661": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "f3cdcd52c10144dca5e9e8a7aa4789a8": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_d6542fe8354b4469b1735b97cb555919",
       "max": 49335454.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_85ee491a7c634dd2af540e9821372394",
       "value": 49335454.0
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
